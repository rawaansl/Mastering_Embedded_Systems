
STM32F103C6 Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003e8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000518  08000520  00010520  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000518  08000518  00010520  2**0
                  CONTENTS
  4 .ARM          00000000  08000518  08000518  00010520  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000518  08000520  00010520  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000518  08000518  00010518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800051c  0800051c  0001051c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010520  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000520  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000520  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010520  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000645  00000000  00000000  00010549  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000001b3  00000000  00000000  00010b8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000003c4  00000000  00000000  00010d41  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000000b0  00000000  00000000  00011108  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000088  00000000  00000000  000111b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000012c9  00000000  00000000  00011240  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00000924  00000000  00000000  00012509  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00004927  00000000  00000000  00012e2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00017754  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000001fc  00000000  00000000  000177d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000500 	.word	0x08000500

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000500 	.word	0x08000500

08000170 <getPosition>:




// to get the postion of the four bits for CNF and MODE for the specified pin
int getPosition(uint16_t pinNumber) {
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	80fb      	strh	r3, [r7, #6]
    switch (pinNumber) {
 800017a:	88fb      	ldrh	r3, [r7, #6]
 800017c:	2b80      	cmp	r3, #128	; 0x80
 800017e:	d042      	beq.n	8000206 <getPosition+0x96>
 8000180:	2b80      	cmp	r3, #128	; 0x80
 8000182:	dc11      	bgt.n	80001a8 <getPosition+0x38>
 8000184:	2b08      	cmp	r3, #8
 8000186:	d036      	beq.n	80001f6 <getPosition+0x86>
 8000188:	2b08      	cmp	r3, #8
 800018a:	dc06      	bgt.n	800019a <getPosition+0x2a>
 800018c:	2b02      	cmp	r3, #2
 800018e:	d02e      	beq.n	80001ee <getPosition+0x7e>
 8000190:	2b04      	cmp	r3, #4
 8000192:	d02e      	beq.n	80001f2 <getPosition+0x82>
 8000194:	2b01      	cmp	r3, #1
 8000196:	d028      	beq.n	80001ea <getPosition+0x7a>
 8000198:	e047      	b.n	800022a <getPosition+0xba>
 800019a:	2b20      	cmp	r3, #32
 800019c:	d02f      	beq.n	80001fe <getPosition+0x8e>
 800019e:	2b40      	cmp	r3, #64	; 0x40
 80001a0:	d02f      	beq.n	8000202 <getPosition+0x92>
 80001a2:	2b10      	cmp	r3, #16
 80001a4:	d029      	beq.n	80001fa <getPosition+0x8a>
 80001a6:	e040      	b.n	800022a <getPosition+0xba>
 80001a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80001ac:	d033      	beq.n	8000216 <getPosition+0xa6>
 80001ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80001b2:	dc09      	bgt.n	80001c8 <getPosition+0x58>
 80001b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80001b8:	d029      	beq.n	800020e <getPosition+0x9e>
 80001ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80001be:	d028      	beq.n	8000212 <getPosition+0xa2>
 80001c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80001c4:	d021      	beq.n	800020a <getPosition+0x9a>
 80001c6:	e030      	b.n	800022a <getPosition+0xba>
 80001c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80001cc:	d027      	beq.n	800021e <getPosition+0xae>
 80001ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80001d2:	dc03      	bgt.n	80001dc <getPosition+0x6c>
 80001d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80001d8:	d01f      	beq.n	800021a <getPosition+0xaa>
 80001da:	e026      	b.n	800022a <getPosition+0xba>
 80001dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80001e0:	d01f      	beq.n	8000222 <getPosition+0xb2>
 80001e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80001e6:	d01e      	beq.n	8000226 <getPosition+0xb6>
 80001e8:	e01f      	b.n	800022a <getPosition+0xba>

// CRL bits
        case GPIO_PIN0_MASK:
            return 0;
 80001ea:	2300      	movs	r3, #0
 80001ec:	e01f      	b.n	800022e <getPosition+0xbe>
        case GPIO_PIN1_MASK:
            return 4;
 80001ee:	2304      	movs	r3, #4
 80001f0:	e01d      	b.n	800022e <getPosition+0xbe>
        case GPIO_PIN2_MASK:
            return 8;
 80001f2:	2308      	movs	r3, #8
 80001f4:	e01b      	b.n	800022e <getPosition+0xbe>
        case GPIO_PIN3_MASK:
            return 12;
 80001f6:	230c      	movs	r3, #12
 80001f8:	e019      	b.n	800022e <getPosition+0xbe>
        case GPIO_PIN4_MASK:
            return 16;
 80001fa:	2310      	movs	r3, #16
 80001fc:	e017      	b.n	800022e <getPosition+0xbe>
        case GPIO_PIN5_MASK:
            return 20;
 80001fe:	2314      	movs	r3, #20
 8000200:	e015      	b.n	800022e <getPosition+0xbe>
        case GPIO_PIN6_MASK:
            return 24;
 8000202:	2318      	movs	r3, #24
 8000204:	e013      	b.n	800022e <getPosition+0xbe>
        case GPIO_PIN7_MASK:
            return 28;
 8000206:	231c      	movs	r3, #28
 8000208:	e011      	b.n	800022e <getPosition+0xbe>


// CRH bits
        case GPIO_PIN8_MASK:
        	return 0;
 800020a:	2300      	movs	r3, #0
 800020c:	e00f      	b.n	800022e <getPosition+0xbe>
        case GPIO_PIN9_MASK:
            return 4;
 800020e:	2304      	movs	r3, #4
 8000210:	e00d      	b.n	800022e <getPosition+0xbe>
        case GPIO_PIN10_MASK:
            return 8;
 8000212:	2308      	movs	r3, #8
 8000214:	e00b      	b.n	800022e <getPosition+0xbe>
        case GPIO_PIN11_MASK:
            return 12;
 8000216:	230c      	movs	r3, #12
 8000218:	e009      	b.n	800022e <getPosition+0xbe>
        case GPIO_PIN12_MASK:
            return 16;
 800021a:	2310      	movs	r3, #16
 800021c:	e007      	b.n	800022e <getPosition+0xbe>
        case GPIO_PIN13_MASK:
            return 20;
 800021e:	2314      	movs	r3, #20
 8000220:	e005      	b.n	800022e <getPosition+0xbe>
        case GPIO_PIN14_MASK:
            return 24;
 8000222:	2318      	movs	r3, #24
 8000224:	e003      	b.n	800022e <getPosition+0xbe>
        case GPIO_PIN15_MASK:
            return 28;
 8000226:	231c      	movs	r3, #28
 8000228:	e001      	b.n	800022e <getPosition+0xbe>
        default:
            return -1; // Handle the case when pinNumber does not match any of the specified cases
 800022a:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800022e:	4618      	mov	r0, r3
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	bc80      	pop	{r7}
 8000236:	4770      	bx	lr

08000238 <MCAL_GPIO_Init>:





void MCAL_GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_Config_TypeDef* pinConfig){
 8000238:	b590      	push	{r4, r7, lr}
 800023a:	b085      	sub	sp, #20
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
 8000240:	6039      	str	r1, [r7, #0]
	uint8_t pin_temp;
	// GPIOx_CRL for pins 0 >>> 7
	// GPIOx_CRH for pin 8 >>> 15

	volatile uint32_t* configRegister = NULL;
 8000242:	2300      	movs	r3, #0
 8000244:	60bb      	str	r3, [r7, #8]
	configRegister = (pinConfig->GPIO_pinNumber > GPIO_PIN8_MASK? &GPIOx->GPIO_CRH : &GPIOx->GPIO_CRL);
 8000246:	683b      	ldr	r3, [r7, #0]
 8000248:	881b      	ldrh	r3, [r3, #0]
 800024a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800024e:	d902      	bls.n	8000256 <MCAL_GPIO_Init+0x1e>
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	3304      	adds	r3, #4
 8000254:	e000      	b.n	8000258 <MCAL_GPIO_Init+0x20>
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	60bb      	str	r3, [r7, #8]

	// reset clear CNF and MODE bits
	*configRegister &= ~(0xF << getPosition(pinConfig->GPIO_pinNumber));
 800025a:	683b      	ldr	r3, [r7, #0]
 800025c:	881b      	ldrh	r3, [r3, #0]
 800025e:	4618      	mov	r0, r3
 8000260:	f7ff ff86 	bl	8000170 <getPosition>
 8000264:	4602      	mov	r2, r0
 8000266:	230f      	movs	r3, #15
 8000268:	4093      	lsls	r3, r2
 800026a:	43da      	mvns	r2, r3
 800026c:	68bb      	ldr	r3, [r7, #8]
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	401a      	ands	r2, r3
 8000272:	68bb      	ldr	r3, [r7, #8]
 8000274:	601a      	str	r2, [r3, #0]
	// check  if the pin is output, speed is configured
	if (pinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_PP ||
 8000276:	683b      	ldr	r3, [r7, #0]
 8000278:	789b      	ldrb	r3, [r3, #2]
 800027a:	2b04      	cmp	r3, #4
 800027c:	d00b      	beq.n	8000296 <MCAL_GPIO_Init+0x5e>
	    pinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_OD ||
 800027e:	683b      	ldr	r3, [r7, #0]
 8000280:	789b      	ldrb	r3, [r3, #2]
	if (pinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_PP ||
 8000282:	2b05      	cmp	r3, #5
 8000284:	d007      	beq.n	8000296 <MCAL_GPIO_Init+0x5e>
	    pinConfig->GPIO_Mode == GPIO_MODE_ALTERNATE_PP ||
 8000286:	683b      	ldr	r3, [r7, #0]
 8000288:	789b      	ldrb	r3, [r3, #2]
	    pinConfig->GPIO_Mode == GPIO_MODE_OUTPUT_OD ||
 800028a:	2b06      	cmp	r3, #6
 800028c:	d003      	beq.n	8000296 <MCAL_GPIO_Init+0x5e>
	    pinConfig->GPIO_Mode == GPIO_MODE_ALTERNATE_OD) {
 800028e:	683b      	ldr	r3, [r7, #0]
 8000290:	789b      	ldrb	r3, [r3, #2]
	    pinConfig->GPIO_Mode == GPIO_MODE_ALTERNATE_PP ||
 8000292:	2b07      	cmp	r3, #7
 8000294:	d10e      	bne.n	80002b4 <MCAL_GPIO_Init+0x7c>
		pin_temp = (((pinConfig->GPIO_Mode - 4) << 2) | (pinConfig->GPIO_Speed & 0x0F));
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	789b      	ldrb	r3, [r3, #2]
 800029a:	3b04      	subs	r3, #4
 800029c:	009b      	lsls	r3, r3, #2
 800029e:	b25a      	sxtb	r2, r3
 80002a0:	683b      	ldr	r3, [r7, #0]
 80002a2:	78db      	ldrb	r3, [r3, #3]
 80002a4:	b25b      	sxtb	r3, r3
 80002a6:	f003 030f 	and.w	r3, r3, #15
 80002aa:	b25b      	sxtb	r3, r3
 80002ac:	4313      	orrs	r3, r2
 80002ae:	b25b      	sxtb	r3, r3
 80002b0:	73fb      	strb	r3, [r7, #15]
 80002b2:	e025      	b.n	8000300 <MCAL_GPIO_Init+0xc8>
	// if the pin is input
	// alternating input is configured as floating input

	else
	{
		if((pinConfig->GPIO_Mode) == (GPIO_MODE_ANALOG) || (pinConfig->GPIO_Mode) == (GPIO_MODE_FLOATING)){
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	789b      	ldrb	r3, [r3, #2]
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d003      	beq.n	80002c4 <MCAL_GPIO_Init+0x8c>
 80002bc:	683b      	ldr	r3, [r7, #0]
 80002be:	789b      	ldrb	r3, [r3, #2]
 80002c0:	2b01      	cmp	r3, #1
 80002c2:	d107      	bne.n	80002d4 <MCAL_GPIO_Init+0x9c>
			pin_temp = ((((pinConfig->GPIO_Mode) << 2) | 0x0) & 0X0F);
 80002c4:	683b      	ldr	r3, [r7, #0]
 80002c6:	789b      	ldrb	r3, [r3, #2]
 80002c8:	009b      	lsls	r3, r3, #2
 80002ca:	b2db      	uxtb	r3, r3
 80002cc:	f003 030f 	and.w	r3, r3, #15
 80002d0:	73fb      	strb	r3, [r7, #15]
 80002d2:	e015      	b.n	8000300 <MCAL_GPIO_Init+0xc8>
		}
		else
		{
			pin_temp = ((((GPIO_MODE_INPUT_PULLUP) << 2)  | 0x0) & 0X0F);
 80002d4:	2308      	movs	r3, #8
 80002d6:	73fb      	strb	r3, [r7, #15]
			if((pinConfig->GPIO_Mode) == GPIO_MODE_INPUT_PULLUP){
 80002d8:	683b      	ldr	r3, [r7, #0]
 80002da:	789b      	ldrb	r3, [r3, #2]
 80002dc:	2b02      	cmp	r3, #2
 80002de:	d107      	bne.n	80002f0 <MCAL_GPIO_Init+0xb8>
				GPIOx->GPIO_ODR |= (pinConfig->GPIO_pinNumber);
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	68db      	ldr	r3, [r3, #12]
 80002e4:	683a      	ldr	r2, [r7, #0]
 80002e6:	8812      	ldrh	r2, [r2, #0]
 80002e8:	431a      	orrs	r2, r3
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	60da      	str	r2, [r3, #12]
 80002ee:	e007      	b.n	8000300 <MCAL_GPIO_Init+0xc8>
		}
			else
			{
				GPIOx->GPIO_ODR &= ~(pinConfig->GPIO_pinNumber);
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	68db      	ldr	r3, [r3, #12]
 80002f4:	683a      	ldr	r2, [r7, #0]
 80002f6:	8812      	ldrh	r2, [r2, #0]
 80002f8:	43d2      	mvns	r2, r2
 80002fa:	401a      	ands	r2, r3
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	60da      	str	r2, [r3, #12]
			}
		}
	}
	// configure CRL or CRH registers
	*configRegister |= ((pin_temp) << (getPosition(pinConfig->GPIO_pinNumber)));
 8000300:	7bfc      	ldrb	r4, [r7, #15]
 8000302:	683b      	ldr	r3, [r7, #0]
 8000304:	881b      	ldrh	r3, [r3, #0]
 8000306:	4618      	mov	r0, r3
 8000308:	f7ff ff32 	bl	8000170 <getPosition>
 800030c:	4603      	mov	r3, r0
 800030e:	fa04 f203 	lsl.w	r2, r4, r3
 8000312:	68bb      	ldr	r3, [r7, #8]
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	431a      	orrs	r2, r3
 8000318:	68bb      	ldr	r3, [r7, #8]
 800031a:	601a      	str	r2, [r3, #0]
}
 800031c:	bf00      	nop
 800031e:	3714      	adds	r7, #20
 8000320:	46bd      	mov	sp, r7
 8000322:	bd90      	pop	{r4, r7, pc}

08000324 <MCAL_GPIO_ReadPin>:

}



uint8_t MCAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t pinNumber){
 8000324:	b480      	push	{r7}
 8000326:	b083      	sub	sp, #12
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
 800032c:	460b      	mov	r3, r1
 800032e:	807b      	strh	r3, [r7, #2]
	if((GPIOx->GPIO_IDR & pinNumber) == GPIO_PIN_RESET)
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	689a      	ldr	r2, [r3, #8]
 8000334:	887b      	ldrh	r3, [r7, #2]
 8000336:	4013      	ands	r3, r2
 8000338:	2b00      	cmp	r3, #0
 800033a:	d101      	bne.n	8000340 <MCAL_GPIO_ReadPin+0x1c>
		return (uint8_t)GPIO_PIN_RESET;
 800033c:	2300      	movs	r3, #0
 800033e:	e000      	b.n	8000342 <MCAL_GPIO_ReadPin+0x1e>
	else
		return (uint8_t)GPIO_PIN_SET;
 8000340:	2301      	movs	r3, #1
}
 8000342:	4618      	mov	r0, r3
 8000344:	370c      	adds	r7, #12
 8000346:	46bd      	mov	sp, r7
 8000348:	bc80      	pop	{r7}
 800034a:	4770      	bx	lr

0800034c <MCAL_GPIO_TogglePin>:
}




void MCAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t pinNumber){
 800034c:	b480      	push	{r7}
 800034e:	b083      	sub	sp, #12
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
 8000354:	460b      	mov	r3, r1
 8000356:	807b      	strh	r3, [r7, #2]
	GPIOx->GPIO_ODR ^= pinNumber;
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	68da      	ldr	r2, [r3, #12]
 800035c:	887b      	ldrh	r3, [r7, #2]
 800035e:	405a      	eors	r2, r3
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	60da      	str	r2, [r3, #12]
}
 8000364:	bf00      	nop
 8000366:	370c      	adds	r7, #12
 8000368:	46bd      	mov	sp, r7
 800036a:	bc80      	pop	{r7}
 800036c:	4770      	bx	lr

0800036e <delay>:


#include "STM32F103x8.h"
#include "stm32f103x8_GPIO_driver.h"

void delay(uint32_t milliseconds) {
 800036e:	b480      	push	{r7}
 8000370:	b085      	sub	sp, #20
 8000372:	af00      	add	r7, sp, #0
 8000374:	6078      	str	r0, [r7, #4]
    // Assuming a 1ms delay for each iteration
    volatile uint32_t count = 0;
 8000376:	2300      	movs	r3, #0
 8000378:	60fb      	str	r3, [r7, #12]
    while (count < (milliseconds * 1000)) {
 800037a:	e002      	b.n	8000382 <delay+0x14>
        count++;
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	3301      	adds	r3, #1
 8000380:	60fb      	str	r3, [r7, #12]
    while (count < (milliseconds * 1000)) {
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000388:	fb02 f203 	mul.w	r2, r2, r3
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	429a      	cmp	r2, r3
 8000390:	d8f4      	bhi.n	800037c <delay+0xe>
    }
}
 8000392:	bf00      	nop
 8000394:	3714      	adds	r7, #20
 8000396:	46bd      	mov	sp, r7
 8000398:	bc80      	pop	{r7}
 800039a:	4770      	bx	lr

0800039c <main>:

int main(void) {
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0

    // Initialize clock configuration
	RCC_GPIOA_clock_enable();
 80003a2:	4b2d      	ldr	r3, [pc, #180]	; (8000458 <main+0xbc>)
 80003a4:	699b      	ldr	r3, [r3, #24]
 80003a6:	4a2c      	ldr	r2, [pc, #176]	; (8000458 <main+0xbc>)
 80003a8:	f043 0304 	orr.w	r3, r3, #4
 80003ac:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_clock_enable();
 80003ae:	4b2a      	ldr	r3, [pc, #168]	; (8000458 <main+0xbc>)
 80003b0:	699b      	ldr	r3, [r3, #24]
 80003b2:	4a29      	ldr	r2, [pc, #164]	; (8000458 <main+0xbc>)
 80003b4:	f043 0308 	orr.w	r3, r3, #8
 80003b8:	6193      	str	r3, [r2, #24]
	// pins A1 and A13 as floating inputs
	// pins B1 and B13 as push-pull output

	GPIO_Config_TypeDef pin_Config;

	pin_Config.GPIO_Mode = GPIO_MODE_FLOATING;
 80003ba:	2301      	movs	r3, #1
 80003bc:	71bb      	strb	r3, [r7, #6]
	pin_Config.GPIO_pinNumber = GPIO_PIN1_MASK;
 80003be:	2302      	movs	r3, #2
 80003c0:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOA, &pin_Config);
 80003c2:	1d3b      	adds	r3, r7, #4
 80003c4:	4619      	mov	r1, r3
 80003c6:	4825      	ldr	r0, [pc, #148]	; (800045c <main+0xc0>)
 80003c8:	f7ff ff36 	bl	8000238 <MCAL_GPIO_Init>

	pin_Config.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 80003cc:	2304      	movs	r3, #4
 80003ce:	71bb      	strb	r3, [r7, #6]
	pin_Config.GPIO_pinNumber = GPIO_PIN1_MASK;
 80003d0:	2302      	movs	r3, #2
 80003d2:	80bb      	strh	r3, [r7, #4]
	pin_Config.GPIO_Speed = GPIO_Speed_10;
 80003d4:	2301      	movs	r3, #1
 80003d6:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &pin_Config);
 80003d8:	1d3b      	adds	r3, r7, #4
 80003da:	4619      	mov	r1, r3
 80003dc:	4820      	ldr	r0, [pc, #128]	; (8000460 <main+0xc4>)
 80003de:	f7ff ff2b 	bl	8000238 <MCAL_GPIO_Init>

	pin_Config.GPIO_Mode = GPIO_MODE_FLOATING;
 80003e2:	2301      	movs	r3, #1
 80003e4:	71bb      	strb	r3, [r7, #6]
	pin_Config.GPIO_pinNumber = GPIO_PIN13_MASK;
 80003e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003ea:	80bb      	strh	r3, [r7, #4]
	MCAL_GPIO_Init(GPIOA, &pin_Config);
 80003ec:	1d3b      	adds	r3, r7, #4
 80003ee:	4619      	mov	r1, r3
 80003f0:	481a      	ldr	r0, [pc, #104]	; (800045c <main+0xc0>)
 80003f2:	f7ff ff21 	bl	8000238 <MCAL_GPIO_Init>

	pin_Config.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 80003f6:	2304      	movs	r3, #4
 80003f8:	71bb      	strb	r3, [r7, #6]
	pin_Config.GPIO_pinNumber = GPIO_PIN13_MASK;
 80003fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003fe:	80bb      	strh	r3, [r7, #4]
	pin_Config.GPIO_Speed = GPIO_Speed_10;
 8000400:	2301      	movs	r3, #1
 8000402:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &pin_Config);
 8000404:	1d3b      	adds	r3, r7, #4
 8000406:	4619      	mov	r1, r3
 8000408:	4815      	ldr	r0, [pc, #84]	; (8000460 <main+0xc4>)
 800040a:	f7ff ff15 	bl	8000238 <MCAL_GPIO_Init>

    while (1){
    	if((MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN1_MASK) == 0)){    // BUTTON PRESS, PUR
 800040e:	2102      	movs	r1, #2
 8000410:	4812      	ldr	r0, [pc, #72]	; (800045c <main+0xc0>)
 8000412:	f7ff ff87 	bl	8000324 <MCAL_GPIO_ReadPin>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d10b      	bne.n	8000434 <main+0x98>
    		MCAL_GPIO_TogglePin(GPIOB, GPIO_PIN1_MASK);
 800041c:	2102      	movs	r1, #2
 800041e:	4810      	ldr	r0, [pc, #64]	; (8000460 <main+0xc4>)
 8000420:	f7ff ff94 	bl	800034c <MCAL_GPIO_TogglePin>
    		while(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN1_MASK) == 0);
 8000424:	bf00      	nop
 8000426:	2102      	movs	r1, #2
 8000428:	480c      	ldr	r0, [pc, #48]	; (800045c <main+0xc0>)
 800042a:	f7ff ff7b 	bl	8000324 <MCAL_GPIO_ReadPin>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d0f8      	beq.n	8000426 <main+0x8a>
    	}
    	if(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN13_MASK) == 1){     // BUTTON PRESS, PDR
 8000434:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000438:	4808      	ldr	r0, [pc, #32]	; (800045c <main+0xc0>)
 800043a:	f7ff ff73 	bl	8000324 <MCAL_GPIO_ReadPin>
 800043e:	4603      	mov	r3, r0
 8000440:	2b01      	cmp	r3, #1
 8000442:	d104      	bne.n	800044e <main+0xb2>
    		MCAL_GPIO_TogglePin(GPIOB, GPIO_PIN13_MASK);
 8000444:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000448:	4805      	ldr	r0, [pc, #20]	; (8000460 <main+0xc4>)
 800044a:	f7ff ff7f 	bl	800034c <MCAL_GPIO_TogglePin>
    	}
    	delay(100);
 800044e:	2064      	movs	r0, #100	; 0x64
 8000450:	f7ff ff8d 	bl	800036e <delay>
    	if((MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN1_MASK) == 0)){    // BUTTON PRESS, PUR
 8000454:	e7db      	b.n	800040e <main+0x72>
 8000456:	bf00      	nop
 8000458:	40021000 	.word	0x40021000
 800045c:	40010800 	.word	0x40010800
 8000460:	40010c00 	.word	0x40010c00

08000464 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000464:	480d      	ldr	r0, [pc, #52]	; (800049c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000466:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000468:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800046c:	480c      	ldr	r0, [pc, #48]	; (80004a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800046e:	490d      	ldr	r1, [pc, #52]	; (80004a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000470:	4a0d      	ldr	r2, [pc, #52]	; (80004a8 <LoopForever+0xe>)
  movs r3, #0
 8000472:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000474:	e002      	b.n	800047c <LoopCopyDataInit>

08000476 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000476:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000478:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800047a:	3304      	adds	r3, #4

0800047c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800047c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800047e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000480:	d3f9      	bcc.n	8000476 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000482:	4a0a      	ldr	r2, [pc, #40]	; (80004ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000484:	4c0a      	ldr	r4, [pc, #40]	; (80004b0 <LoopForever+0x16>)
  movs r3, #0
 8000486:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000488:	e001      	b.n	800048e <LoopFillZerobss>

0800048a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800048a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800048c:	3204      	adds	r2, #4

0800048e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800048e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000490:	d3fb      	bcc.n	800048a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000492:	f000 f811 	bl	80004b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000496:	f7ff ff81 	bl	800039c <main>

0800049a <LoopForever>:

LoopForever:
    b LoopForever
 800049a:	e7fe      	b.n	800049a <LoopForever>
  ldr   r0, =_estack
 800049c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80004a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004a4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004a8:	08000520 	.word	0x08000520
  ldr r2, =_sbss
 80004ac:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004b0:	2000001c 	.word	0x2000001c

080004b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004b4:	e7fe      	b.n	80004b4 <ADC1_2_IRQHandler>
	...

080004b8 <__libc_init_array>:
 80004b8:	b570      	push	{r4, r5, r6, lr}
 80004ba:	2500      	movs	r5, #0
 80004bc:	4e0c      	ldr	r6, [pc, #48]	; (80004f0 <__libc_init_array+0x38>)
 80004be:	4c0d      	ldr	r4, [pc, #52]	; (80004f4 <__libc_init_array+0x3c>)
 80004c0:	1ba4      	subs	r4, r4, r6
 80004c2:	10a4      	asrs	r4, r4, #2
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	d109      	bne.n	80004dc <__libc_init_array+0x24>
 80004c8:	f000 f81a 	bl	8000500 <_init>
 80004cc:	2500      	movs	r5, #0
 80004ce:	4e0a      	ldr	r6, [pc, #40]	; (80004f8 <__libc_init_array+0x40>)
 80004d0:	4c0a      	ldr	r4, [pc, #40]	; (80004fc <__libc_init_array+0x44>)
 80004d2:	1ba4      	subs	r4, r4, r6
 80004d4:	10a4      	asrs	r4, r4, #2
 80004d6:	42a5      	cmp	r5, r4
 80004d8:	d105      	bne.n	80004e6 <__libc_init_array+0x2e>
 80004da:	bd70      	pop	{r4, r5, r6, pc}
 80004dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80004e0:	4798      	blx	r3
 80004e2:	3501      	adds	r5, #1
 80004e4:	e7ee      	b.n	80004c4 <__libc_init_array+0xc>
 80004e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80004ea:	4798      	blx	r3
 80004ec:	3501      	adds	r5, #1
 80004ee:	e7f2      	b.n	80004d6 <__libc_init_array+0x1e>
 80004f0:	08000518 	.word	0x08000518
 80004f4:	08000518 	.word	0x08000518
 80004f8:	08000518 	.word	0x08000518
 80004fc:	0800051c 	.word	0x0800051c

08000500 <_init>:
 8000500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000502:	bf00      	nop
 8000504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000506:	bc08      	pop	{r3}
 8000508:	469e      	mov	lr, r3
 800050a:	4770      	bx	lr

0800050c <_fini>:
 800050c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800050e:	bf00      	nop
 8000510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000512:	bc08      	pop	{r3}
 8000514:	469e      	mov	lr, r3
 8000516:	4770      	bx	lr
