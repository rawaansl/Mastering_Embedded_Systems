/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#include <stdint.h>

#define RCC  0x40021000 // Base address of RCC
#define GPIO 0x40010800 // Base address of GPIO

// RCC Registers
#define RCC_CR      (*(volatile uint32_t*)(RCC + 0x00)) // Address of the CR register
#define RCC_APB2ENR (*(volatile uint32_t*)(RCC + 0x18)) // Address of APB2ENR register
#define RCC_CFGR    (*(volatile uint32_t*)(RCC + 0x04)) // Address of the CFGR register

// GPIO Registers
#define GPIO_CRH (*(volatile uint32_t*)(GPIO + 0x04)) // Address of CRH register
#define GPIO_ODR (*(volatile uint32_t*)(GPIO + 0x0C)) // Address of the ODR register

// Structure for GPIO Pin 13
typedef union {
    uint32_t all_bits;
    struct {
        volatile uint32_t reserved:13;
        volatile uint32_t pin13:1;
    } pin;
} REG;

volatile REG* R_ODR = (volatile REG*)(GPIO + 0x0C); // Pointer to the base address of the ODR register

void clock_init() {
    // Enable clock for port A (bit 2 in RCC_APB2ENR)
    RCC_APB2ENR |= (1 << 2);

    // Enable HSI (bit 0 in RCC_CR) and set HCLK to be divided by 4 (bits 13:11 in RCC_CFGR)
    RCC_CR |= (1 << 0) ; // HSI on
    RCC_CFGR |= (0b101 << 11); // HCLK divided by 4

    // Set HCLK to be divided by 2 (bits 10:8 in RCC_CFGR)
    RCC_CFGR |= (0b100 << 8);

    // Select HSI clock (bits 1:0 in RCC_CFGR) and SYSCLK not divided (AHB prescaler)
    RCC_CFGR &= ~(0b11);
    RCC_CFGR &= ~(0b1 << 7);
}

int main(void) {
    // Initialize clock configuration
    clock_init();

    // Configure GPIO pin 13 as output (bits 22:20 in GPIO_CRH)
    GPIO_CRH &= 0xFF0FFFFF; // clear bits 20-24
    GPIO_CRH |= 0x00200000; // set 2 on 20-24 bits

    // Main loop to toggle pin 13
    while (1) {
        R_ODR->pin.pin13 = 1; // Set pin 13 high
        for (int i = 0; i < 5000; i++); // Delay
        R_ODR->pin.pin13 = 0; // Set pin 13 low
        for (int i = 0; i < 5000; i++); // Delay
    }
}
